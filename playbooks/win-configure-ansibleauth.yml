# Ansible playbook which configures a host for certficiate-based authentication
# for the 'ansible' user

- hosts: '{{ host }}'
  gather_facts: no

  tasks:

  # Check if the WinRM certificate exists
  - name: 'Check WinRM certificate exists'
    win_shell: |
      Get-ChildItem Cert:\LocalMachine\My | ?{$_.Subject -like ("CN=WinRM over HTTPS ("+$Env:ComputerName+")*")}
    register: WinRMCertificateCheck
    changed_when: false

  - name: 'Create 10 year WinRM certificate'
    win_shell: |
      $ComputerName = $Env:COMPUTERNAME.ToLower()
      $name = new-object -com "X509Enrollment.CX500DistinguishedName.1"
      $name.Encode(("CN=WinRM over HTTPS ($ComputerName),OU=OUName,O=ORGName"), 0)

      # Create a 2048 bit private key
      $key = new-object -com "X509Enrollment.CX509PrivateKey.1"
      $key.ProviderName = "Microsoft RSA SChannel Cryptographic Provider"
      $key.KeySpec = 1
      $key.Length = 2048
      $key.SecurityDescriptor = "D:PAI(A;;0xd01f01ff;;;SY)(A;;0xd01f01ff;;;BA)(A;;0x80120089;;;NS)"
      $key.MachineContext = 1
      $key.Create()

      # Configure EnhancedKeyUsage for Server Authentication (OID 1.3.6.1.5.5.7.3.1)
      $serverauthoid = new-object -com "X509Enrollment.CObjectId.1"
      $serverauthoid.InitializeFromValue("1.3.6.1.5.5.7.3.1")
      $ekuoids = new-object -com "X509Enrollment.CObjectIds.1"
      $ekuoids.add($serverauthoid)
      $ekuext = new-object -com "X509Enrollment.CX509ExtensionEnhancedKeyUsage.1"
      $ekuext.InitializeEncode($ekuoids)

      # Configure the Signature Algorithm to use SHA-256
      [string]$SignatureAlgorithm = "SHA256"
      $SigOID = New-Object -ComObject X509Enrollment.CObjectId
      $SigOID.InitializeFromValue(([Security.Cryptography.Oid]$SignatureAlgorithm).Value)

      # Add the Subject Alternative Names
      $SAN = New-Object -ComObject X509Enrollment.CX509ExtensionAlternativeNames
      $IANs = New-Object -ComObject X509Enrollment.CAlternativeNames

      $ComputerName, ($ComputerName+".ybs.com") | ForEach-Object {
        # instantiate a IAlternativeName object
        $IAN = New-Object -ComObject X509Enrollment.CAlternativeName
        # initialize the object by using current element in the pipeline
        $IAN.InitializeFromString(0x3,$_)
        # add created object to an object collection of IAlternativeNames
        $IANs.Add($IAN)
      }
      $SAN.InitializeEncode($IANs)

      # Create the key usage properties for DigitalSignature and KeyEncipherment
      $KeyUsage = New-Object -ComObject X509Enrollment.CX509ExtensionKeyUsage
      $KeyUsage.InitializeEncode([int][Security.Cryptography.X509Certificates.X509KeyUsageFlags]"DigitalSignature,KeyEncipherment")
      $KeyUsage.Critical = $true

      # Create the certificate with the options created above
      $cert = new-object -com "X509Enrollment.CX509CertificateRequestCertificate.1"
      $cert.InitializeFromPrivateKey(2, $key, "")
      $cert.Subject = $name
      $cert.Issuer = $cert.Subject
      $cert.NotBefore = [DateTime]::Now
      $cert.NotAfter = $cert.NotBefore.AddYears(5)
      $cert.X509Extensions.Add($ekuext)
      $cert.X509Extensions.Add($SAN)
      $cert.X509Extensions.Add($KeyUsage)
      $Cert.SignatureInformation.HashAlgorithm = $SigOID
      $cert.Encode()

      # install the certificate for use by other applications
      $enrollment = new-object -com "X509Enrollment.CX509Enrollment.1"
      $enrollment.InitializeFromRequest($cert)
      $certdata = $enrollment.CreateRequest(0)
      $enrollment.InstallResponse(2, $certdata, 0, "")
    when: WinRMCertificateCheck.stdout == ""
    register: WinRMCertificate
